# name of our workflow
name: CI Workflow Django+FastAPI

# triggers for our workflow
on: [push]

jobs:
  health-check-job: # health check job for testing and code formatting check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        # the environment variable must match with app/settings.py
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      # checking our the code at current commit that triggers the workflow
      - name: Checkout code
        uses: actions/checkout@v2
      # caching dependency will make our build faster.
      # for more info checkout pip section documentation at https://github.com/actions/cache
      - name: Cache dependency
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Check Python version
        run: python --version

      ### CI for Django
      - name: Install requirements
        run: cd django && pip install -r requirements.txt
      - name: Run Database MakeMigrations
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: cd django && python manage.py makemigrations
      - name: Run Database Migrations
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: cd django && python manage.py migrate
      - name: Check pep8 with black for Djnago
        run: cd django && python -m black --check .
      - name: Run django tests (pytest with coverage)
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: cd django && pytest -v --cov -p no:cacheprovider

      ### CI for FastApi
      - name: Install requirements
        run: cd fastapi && pip install -r requirements.txt
      - name: Check pep8 with black for fastapi
        run: cd fastapi && python -m black --check .
      - name: Run fastapi tests (pytest with coverage)
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
          MAIL_FROM_NAME: ${{ secrets.MAIL_FROM_NAME }}
        run: cd fastapi && pytest -v --cov -p no:cacheprovider
